using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using WebApplication2.Areas.Identity.Data;
using WebApplication2.Data;
namespace WebApplication2
{
    public class Program
    {
        // Most of the code for this class was autogenerated by Visual Studio
        public static async Task Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);
            var connectionString = builder.Configuration.GetConnectionString("WebApplication2ContextConnection") ?? throw new InvalidOperationException("Connection string 'WebApplication2ContextConnection' not found.");

            builder.Services.AddDbContext<WebApplication2Context>(options => options.UseSqlServer(connectionString));

            /*
            * This code was taken from a Youtube video
            * Uploaded by: Macro Code
            * Titled: ASP.NET Core 7.0 Role Based Authorization || How to Implement Roles Based Authorization
            * Available at: https://www.youtube.com/watch?v=VZgxKbAdbbo
            * Accessed 24 May 2023
            */
            builder.Services.AddIdentity<WebApplication2User, IdentityRole>(options => options.SignIn.RequireConfirmedAccount = false)
                            .AddDefaultUI()
                            .AddDefaultTokenProviders()
                            .AddEntityFrameworkStores<WebApplication2Context>();

            // Add services to the container.
            builder.Services.AddControllersWithViews();

            builder.Services.AddRazorPages();

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthentication();

            app.UseAuthorization();
            /*
             * This code was taken from a Youtube video
             * Uploaded by: Macro Code
             * Titled: ASP.NET Core 7.0 Role Based Authorization || How to Implement Roles Based Authorization
             * Available at: https://www.youtube.com/watch?v=VZgxKbAdbbo
             * Accessed 24 May 2023
            */
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapRazorPages();
            });

            app.MapRazorPages();

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");

            // Seeding roles into new database (whenever a new environment is created)
            /*
             * This code was taken from an online blog
             * Uploaded by: Microsoft
             * Titled: Data Seeding
             * Available at: https://learn.microsoft.com/en-us/ef/core/modeling/data-seeding
             * Accessed 23 May 2023
            */
            using (var scope = app.Services.CreateScope())
            {
                var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();

                var roles = new[] { "Farmer", "Employee" };

                foreach (var role in roles)
                {
                    if (!await roleManager.RoleExistsAsync(role))
                        await roleManager.CreateAsync(new IdentityRole(role));
                }
            }

            app.Run();
        }
    }
}
